@startuml

package FracturesLibrary <<Folder>> {
struct Trace
{
+ id : unsigned int
+ len : double
+ coordinates_extremes : MatrixXd
+ id_fract1 : unsigned int
+ id_fract2 : unsigned int

+ inline double calcolo_lunghezza()


}

struct Fracture
{
+ id : unsigned int
+ num_vertices : unsigned int
+ vertices : vector<unsigned int>

+ inline Matrix3d calcolo_piano(const vector<Vector3d>& coord)
}


Trace <|-- Funzioni
Fracture <|--Funzioni

class Funzioni { 
+ bool {abstract} importData(const string& path, vector<Fracture>& lista, vector<Vector3d>& coord);
+ bool {abstract} NearFractures(const Fracture& frc1, const Fracture& frc2, const vector<Vector3d>& coord);
+ void {abstract} IntersectionFractures(Fracture &frc1, Fracture &frc2, const vector<Vector3d>& coord, list<Trace>& list_traces, map<unsigned int, list<Trace>>& P_traces, map<unsigned int, list<Trace>>& NP_traces);

--funzioni di supporto--

+ inline bool Parallelismo(const Matrix3d& piano_1, const Matrix3d& piano_2)
+ inline MatrixXd Retta_tra_piani(const Matrix3d& piano_1, const Matrix3d& piano_2)
+ inline MatrixXd Retta_per_due_vertici_della_frattura(unsigned int id_vertice1, unsigned int id_vertice2, const vector<Vector3d>& coord)
+ inline Vector2d alpha_di_intersezione(MatrixXd r_frattura, MatrixXd retta_intersez)
+ inline bool compare_beta(const array<double,2>& arr1, const array<double,2>& arr2)

}

}

package Reshaping_array <<Frame>>{
class Reshaping{
--template<typename T>--
+ void {abstract} VerificaRaddoppio( vector<T>& vec)
+ void {abstract} VerificaDimezzamento( vector<T>& vec)


}
}

package Gedim <<Frame>>
{
}
Reshaping_array.Reshaping --> FracturesLibrary.Fractures::coordinates : controllo dimensione vettori



@enduml