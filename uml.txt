@startuml

package FracturesLibrary <<Folder>> {
struct Trace
{
+ id : unsigned int
+ len : double
+ coordinates_extremes : MatrixXd
+ id_fract1 : unsigned int
+ id_fract2 : unsigned int

+ inline double calcolo_lunghezza()
}


struct Fracture
{
+ id : unsigned int
+ num_vertices : unsigned int
+ vertices : vector<unsigned int>

+ inline Matrix3d calcolo_piano(const vector<Vector3d>& coord)
}
} /'chiusira mainspace FracturesLibrary'/



entity VariablesMain {
+ list_fractures : vector<Fracture> 
+ list_traces : list<Trace> 
+ P_traces_of_fractures : map<unsigned int, list<Trace>> 
+ NP_traces_of_fractures : map<unsigned int, list<Trace>>
+ SottoPoligonazione_per_frattura : vector<PolygonalMesh>
}


package UtilsFunctions <<Folder>>{ 
struct FracturesFunctions { 
+ double eps_macchina
+ const double tolleranza1D
+ const double tolleranda2D
+ const double tolleranda3D

+ bool {abstract} lettura_da_file(percorso, vector<fracture>,  coordinate);
+ bool {abstract} vicinanza_sfere(fracture1, fracture2, coordinate);
+ void {abstract} ricerca_tracce(fracure1, fracture2, coordinate, list_traces, P_traces,  NP_traces);
+ PolygonalMesh {abstract} creazione_mesh(frattura,P_traces,NP_traces, coord)

--funzioni di supporto--

+ inline bool Parallelismo(piano_1, piano_2)
+ inline MatrixXd Retta_tra_piani(piano_1, piano_2)
+ inline MatrixXd Retta_per_due_vertici_della_frattura(vertice1, vertice2, coord)
+ inline Vector2d alpha_di_intersezione(lato, retta_intersezione)


+ inline MatrixXd Retta_per_due_punti(punto1, punto2)
+ inline Vector2d intersezione_rette(lato, retta_traccia)
+ inline bool appartiene_a_segmento(origine, fine, punto)
+ inline bool pto_unico(punto, punti, id)
+ inline double ascissa_curvilinea(retta, punto)

}
}

Trace <|-- FracturesFunctions
Fracture <|--FracturesFunctions

package Reshaping_array <<Frame>>{

class  Reshaping{
--template<typename T>--
+ void {abstract} VerificaRaddoppio( vector<T>& vec)
+ void {abstract} VerificaDimezzamento( vector<T>& vec)
}

} 

VariablesMain <|-- FracturesFunctions::intersectionFractures

package PolygonalMesh <<Folder>>{
struct PolygonalMesh{

+ NumberCell0D : unsigned int   
+ Cell0DId : vector<unsigned int>   
+ Cell0DCoordinates :  vector<Vector3d>   

+ NumberCell1D : unsigned int
+ Cell1DId :  vector<unsigned int>  
+ Cell1DVertices : vector<Vector2i> 
+ Cell1DStatus : vector<bool>

+ NumberCell2D : unsigned int 
+ Cell2DId : vector<unsigned int> 
+ Cell2DVertices : vector<vector<unsigned int>>  
+ Cell2DEdges : vector<vector<unsigned int>> 
}

}

PolygonalMesh <|-- FracturesLibrary
UtilsFunctions --> PolygonalMesh
Reshaping_array <-up- UtilsFunctions

@enduml